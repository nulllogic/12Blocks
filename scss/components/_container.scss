/*
┌─┐┌─┐┌┐┌┌┬┐┌─┐┬┌┐┌┌─┐┬─┐
│  │ ││││ │ ├─┤││││├┤ ├┬┘
└─┘└─┘┘└┘ ┴ ┴ ┴┴┘└┘└─┘┴└─
*/
@use '../mixins/container' as mixins;
@use '../mixins/breakpoints' as breakpoints;
@use '../functions' as functions;

$config: nil !default;

$is-container-classes-enabled: functions.get-config($config, 'enable.container-classes');
$container-breakpoints: functions.get-config($config, 'container-breakpoints');
$grid-breakpoints: functions.get-config($config, 'grid-breakpoints');

// Container
@if $is-container-classes-enabled {

  .container,
  .container-fluid {
    @include mixins.generate_container();
  }

  @each $breakpoint, $container-max-width in $container-breakpoints {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include breakpoints.media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if ($extend-breakpoint) {

          .container#{breakpoints.breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          @if ($breakpoint == $name) {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}
