/**
┌┐ ┬ ┬┌┬┐┌┬┐┌─┐┌┐┌┌─┐
├┴┐│ │ │  │ │ ││││└─┐
└─┘└─┘ ┴  ┴ └─┘┘└┘└─┘
**/

@use '../config';
@use '../themes/default' as theme;
@use '../functions' as functions;

@use '../mixins' as mixins;
@use '../mixins/variants/button' as variant;

$config: nil !default;
$theme: nil !default;

$prefix: functions.get-config($config, 'prefix');
$color-scheme: functions.get-config($config, 'color-scheme');

$is-shadow-enabled: functions.get-config($config, 'shadow');
$is-border-radius-enabled: functions.get-config($config, 'border-radius');

$button-component: functions.get-theme($theme, 'components.button');

.btn {

 // border: #{config.$btn-border-width} solid var(--#{config.$prefix}btn-border-color);

//  @include mixins.border-radius(config.$btn-border-radius);
//  @include mixins.box-shadow(config.$btn-box-shadow);
//  @include mixins.transition(config.$btn-transition);
  
  @include mixins.generate-properties('button', $button-component, $config);

  background: var(--#{$prefix}-button-background);
  color: var(--#{$prefix}-button-color);
  padding: var(--#{$prefix}-button-padding);
  border: var(--#{$prefix}-button-border);

  @if($is-border-radius-enabled) {
    @include mixins.border-radius(var(--#{$prefix}-button-border-radius));
  }

  @if($is-shadow-enabled) {
    @include mixins.box-shadow(var(--#{$prefix}-button-shadow));
  }

  &:hover {
    color: var(--#{$prefix}-button-hover-color);
    background: var(--#{$prefix}-button-hover-background);
    border: var(--#{$prefix}-button-hover-border);
  }

  &.btn-link {
    background: transparent;
    border: none;
  }
}
