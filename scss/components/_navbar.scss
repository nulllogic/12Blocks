/*
┌┐┌┌─┐┬  ┬┬┌─┐┌─┐┌┬┐┬┌─┐┌┐┌
│││├─┤└┐┌┘││ ┬├─┤ │ ││ ││││
┘└┘┴ ┴ └┘ ┴└─┘┴ ┴ ┴ ┴└─┘┘└┘
*/

/* Load settings and functions */
@use '../themes/default' as theme;
@use '../functions' as functions;
@use '../mixins' as mixins;

/* SCSS variables definition requirement */
$config: nil !default;
$theme: nil !default;

/* Variables assigment */
$prefix: functions.get-config($config, 'prefix');
$color_scheme: functions.get-config($config, 'color-scheme');

/* Configuration variables assigment */
$is_shadow_enabled: functions.get-config($config, 'shadow');
$is_border_radius_enabled: functions.get-config($config, 'border-radius');

/* Wrapper class variables assigment */
$is_wrapper_enabled: functions.get-config($config, 'enable.wrapper');
$wrapper_class: functions.get-config($config, 'wrapper-class');

/* Loading component settings and styling */
$navbar-component: functions.get-theme($theme, 'components.navbar');

%navbar {
  @include mixins.generate-properties('navbar', $navbar-component, $config);

  background: var(--#{$prefix}-navbar-background);
  color: var(--#{$prefix}-navbar-color);
  padding: var(--#{$prefix}-navbar-padding);
  border: var(--#{$prefix}-navbar-border);

  grid-template-columns: var(--#{$prefix}-navbar-grid-template-columns);
  grid-gap: var(--#{$prefix}-navbar-gap);

  .left {
    justify-self: var(--#{$prefix}-navbar-left-column-alignment);
  }

  .center {
    justify-self: var(--#{$prefix}-navbar-center-column-alignment);
  }

  .right {
    justify-self: var(--#{$prefix}-navbar-right-column-alignment);
  }

}

@if $is_wrapper_enabled {
  
  .#{$wrapper_class} .navbar {
    @extend %navbar;
  }

} @else {
  
  .navbar {
    @extend %navbar;
  }

}
