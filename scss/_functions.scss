@function str-split($string, $separator) {
  $split-arr: ();
  $index : str-index($string, $separator);
  @while $index != null {
    $item: str-slice($string, 1, $index - 1);
    $split-arr: append($split-arr, $item);
    $string: str-slice($string, $index + 1);
    $index : str-index($string, $separator);
  }
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

@function get-config($config, $value) {
  $val: null;

  @if (str-index($value, '.')) {
    $path: str-split($value, '.');
    $val: map-get($config, $path...);
  } @else {
    $val: map-get($config, $value);
  }

  @if ($val != null) {
    @return $val;
  } @else {
    @return nil;
  }
}

@function get-theme($theme, $value) {
  $val: null;

  @if (str-index($value, '.')) {
    $path: str-split($value, '.');
    $val: map-get($theme, $path...);
  } @else {
    $val: map-get($theme, $value);
  }

  @if ($val != null) {
    @return $val;
  } @else {
    @return nil;
  }

}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.
@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, "url(") == 1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Row columns
@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);

  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;

  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  @return $result;
}
