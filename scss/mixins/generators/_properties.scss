@use "sass:meta";
@use '../../functions' as functions;
@use '../../mixins/generators/color-sheme' as mixin;

@mixin generate-css-properties($tag, $prefix, $property, $value) {
  --#{$prefix}-#{$tag}-#{functions.str-replace($property, '--', '')} : #{meta.inspect($value)};
}

@mixin generate-css-variables() {

}

@mixin generate-colors() {

}

@mixin generate-subclasses($tag, $class, $properties, $config) {
  @debug $class, $properties;
  #{$class} {
    @include generate-properties($tag, $properties, $config);
  }
}

@mixin generate-properties($tag, $properties, $config) {
  $prefix: functions.get-config($config, 'prefix');

  @each $property, $value in $properties {

    // Variables
    // Looking for "--" symbols in the beggining of the property
    // Example // --flex-direction : row
    @if (type-of($property) == 'string' and str-index($property, '--') == 1) {
      @include generate-css-properties($tag, $prefix, $property, $value);
    }


    // Colors
    @else if ($property =='colors') {

      @each $color, $color-properties in $value {
        @each $scheme in functions.str-split(functions.get-config($config, 'color-scheme'), ' ') {
          @if $scheme == $color {
            @include mixin.generate-color-scheme($color) {
              @each $color-property, $color-value in $color-properties {
                --#{$prefix}-#{$tag}-#{functions.str-replace($color-property, '--', '')}: #{meta.inspect($color-value)};
              }
            }
          }
        }
      }
    } 

    // Subclasses
    @else if ($property == 'subclasses') {
      @each $class, $class_properties in $value {
        @include generate-subclasses($tag, $class, $class_properties, $config);
      }
    }

    @else {

      @if (type-of($value) == 'string' and str-index($value, 'var(--') == 1) {
        #{$property} : #{meta.inspect(functions.str-replace($value,'--','--' + $prefix + '-'))};
      } @else {
        #{$property} : #{meta.inspect($value)};
      }

    }
  }
}
